name: "Test, Build, Deploy"

on:
    push:
        branches:
            - master
    pull_request:
        types: [open, synchronize]

jobs:
    lint:
        runs-on: ubuntu-latest
        timeout-minutes: 3
        name: Lint Source Code
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v2
              with:
                  node-version: "16.13.2"

            - name: Print npm verion
              run: npm --version

            - name: Print node verion
              run: node --version

            - name: Install Root Dependencies
              run: npm ci

            - name: Run ESLint
              run: npm run lint

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v1

            - name: Terraform Format
              run: terraform fmt -check

    testLib:
        name: "Test Lib"
        needs: lint
        timeout-minutes: 10
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - uses: actions/setup-node@v2-beta
              with:
                  node-version: "16.13.2"

            - name: Print npm verion
              run: npm --version

            - name: Print node verion
              run: node --version

            - name: Cache Lib Node_modules
              id: cache-lib-node-modules
              uses: actions/cache@v1
              with:
                  path: lib/node_modules
                  key: datampm-registry-${{ runner.OS }}-lib-${{ hashFiles('lib/package.json', 'lib/package-lock.json') }}

            - name: Install Lib Dependencies
              id: install-lib-Dependencies
              if: steps.cache-lib-node-modules.outputs.cache-hit != 'true'
              run: npm ci
              working-directory: lib

            - name: Test Lib
              id: test-lib-Dependencies
              run: npm run test
              working-directory: lib

            - name: Build Lib
              id: build-lib-Dependencies
              run: npm run build
              working-directory: lib

    testBackend:
        name: "Test Backend"
        needs: lint
        timeout-minutes: 10
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - uses: actions/setup-node@v2-beta
              with:
                  node-version: "16.13.2"

            - name: Print npm verion
              run: npm --version

            - name: Print node verion
              run: node --version

            - name: Cache Lib Build
              id: cache-lib
              uses: actions/cache@v1
              with:
                  path: lib
                  key: datampm-registry-${{ runner.OS }}-lib-${{ hashFiles('lib/**') }}

            - name: Install Lib Dependencies
              id: install-lib-dependencies
              if: steps.cache-lib.outputs.cache-hit != 'true'
              run: npm ci
              working-directory: lib

            - name: Build Lib
              id: build-lib-dependencies
              if: steps.cache-lib.outputs.cache-hit != 'true'
              run: npm run build
              working-directory: lib

            - name: Link Lib
              run: npm link
              working-directory: lib/dist

            - name: Cache Backend Node_modules
              id: cache-backend-node-modules
              uses: actions/cache@v1
              with:
                  path: backend/node_modules
                  key: datampm-registry-${{ runner.OS }}-backend-${{ hashFiles('backend/package.json', 'backend/package-lock.json') }}

            - name: Install Backend Dependencies
              id: install-backend-Dependencies
              if: steps.cache-backend-node-modules.outputs.cache-hit != 'true'
              run: npm ci
              working-directory: backend

            - name: Link Lib for Backend
              run: npm link datapm-lib
              working-directory: backend

            - name: Test Backend
              id: test-backend-Dependencies
              run: npm run test
              working-directory: backend

    testFrontend:
        name: "Test Frontend"
        needs: lint
        timeout-minutes: 10
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - uses: actions/setup-node@v2-beta
              with:
                  node-version: "16.13.2"

            - name: Print npm verion
              run: npm --version

            - name: Print node verion
              run: node --version

            - name: Cache Lib Build
              id: cache-lib
              uses: actions/cache@v1
              with:
                  path: lib
                  key: datampm-registry-${{ runner.OS }}-lib-${{ hashFiles('lib/**') }}

            - name: Install Lib Dependencies
              id: install-lib-dependencies
              if: steps.cache-lib.outputs.cache-hit != 'true'
              run: npm ci
              working-directory: lib

            - name: Build Lib
              id: build-lib-dependencies
              if: steps.cache-lib.outputs.cache-hit != 'true'
              run: npm run build
              working-directory: lib

            - name: Link Lib
              run: npm link
              working-directory: lib/dist

            - name: Cache Backend Node_modules
              id: cache-backend-node-modules
              uses: actions/cache@v1
              with:
                  path: backend/node_modules
                  key: datampm-registry-${{ runner.OS }}-backend-${{ hashFiles('backend/package.json', 'backend/package-lock.json') }}

            - name: Install Backend Dependencies
              id: install-backend-Dependencies
              if: steps.cache-backend-node-modules.outputs.cache-hit != 'true'
              run: npm ci
              working-directory: backend

            - name: Link Lib for Backend
              run: npm link datapm-lib
              working-directory: backend

            - name: Build Backend
              id: build-backend
              if: steps.cache-backend.outputs.cache-hit != 'true'
              run: npm run build
              working-directory: backend

            - name: Cache Frontend Node_modules
              id: cache-frontend-node-modules
              uses: actions/cache@v1
              with:
                  path: frontend/node_modules
                  key: datampm-registry-${{ runner.OS }}-frontend-${{ hashFiles('frontend/package.json', 'frontend/package-lock.json') }}

            - name: Install Frontend Dependencies
              id: install-fronend-dependencies
              if: steps.cache-frontend-node-modules.outputs.cache-hit != 'true'
              run: npm ci
              working-directory: frontend

            - name: Link Lib for Frontend
              run: npm link datapm-lib
              working-directory: frontend

            - name: Test Frontend
              id: test-frontend-Dependencies
              run: npm run test:ci
              working-directory: frontend

    testClient:
        name: "Test Client"
        needs: lint
        timeout-minutes: 20
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - uses: actions/setup-node@v2-beta
              with:
                  node-version: "16.13.2"

            - name: Print npm verion
              run: npm --version

            - name: Print node verion
              run: node --version

            - name: Cache Lib Build
              id: cache-lib
              uses: actions/cache@v1
              with:
                  path: lib
                  key: datampm-registry-${{ runner.OS }}-lib-${{ hashFiles('lib/**') }}

            - name: Install Lib Dependencies
              id: install-lib-dependencies
              if: steps.cache-lib.outputs.cache-hit != 'true'
              run: npm ci
              working-directory: lib

            - name: Build Lib
              id: build-lib-dependencies
              if: steps.cache-lib.outputs.cache-hit != 'true'
              run: npm run build
              working-directory: lib

            - name: Link Lib
              run: npm link
              working-directory: lib/dist

            - name: Cache Backend Dependencies
              id: cache-backend-dependencies
              uses: actions/cache@v1
              with:
                  path: backend/node_modules
                  key: datampm-registry-${{ runner.OS }}-backend-${{ hashFiles('backend/package*.json') }}

            - name: Install Backend Dependencies
              id: install-backend-Dependencies
              if: steps.cache-backend-dependencies.outputs.cache-hit != 'true'
              run: npm ci
              working-directory: backend

            - name: Link Lib for Backend
              run: npm link datapm-lib
              working-directory: backend

            - name: Build Backend
              id: build-backend
              run: npm run build
              working-directory: backend

            - name: Cache Client Node_modules
              id: cache-client-node-modules
              uses: actions/cache@v1
              with:
                  path: client/node_modules
                  key: datampm-client-${{ runner.OS }}-${{ hashFiles('client/package.json', 'client/package-lock.json', 'client/npm-shrinkwrap.json') }}

            - name: Install Client Dependencies
              id: install-client-dependencies
              if: steps.cache-client-node-modules.outputs.cache-hit != 'true'
              run: npm ci
              working-directory: client

            - name: Link Lib for Client
              run: npm link datapm-lib
              working-directory: client

            - name: Test Client
              id: test-client-Dependencies
              run: npm run test
              working-directory: client
              env:
                  CREDENTIALS_SECRET_KEY: test-key-not-for-production

    build-win-client:
        runs-on: windows-latest
        timeout-minutes: 15
        needs:
            - testLib
            - testBackend
            - testFrontend
            - testClient
        if: github.ref == 'refs/heads/master'
        name: Build Windows Client Installer
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v2
              with:
                  node-version: "16.13.2"

            - name: Install Lib Dependencies
              run: npm ci
              working-directory: lib

            - name: Build Lib
              run: npm run build
              working-directory: lib

            - name: Link Lib
              run: npm link
              working-directory: lib/dist

            - name: Install client dependencies
              run: npm ci
              working-directory: client
              if: steps.cache-client-node-modules.outputs.cache-hit != 'true'

            - name: Link Lib for Client
              run: npm link datapm-lib
              working-directory: client

            - name: Run build
              run: npm run build
              working-directory: client

            - run: npm run package:win
              working-directory: client
              env:
                  CERTIFICATE_BASE64: ${{ secrets.WINDOWS_CLIENT_CERTIFICATE_BASE64 }}
                  CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CLIENT_CERTIFICATE_PASSWORD }}

            - name: "Save Windows Executable"
              uses: actions/upload-artifact@v2
              with:
                  name: datapm-client-windows
                  path: client/installers/windows/dist/datapm-*.msixbundle
                  retention-days: 5

    build-macos-client:
        runs-on: macos-latest
        timeout-minutes: 25
        needs:
            - testLib
            - testBackend
            - testFrontend
            - testClient
        if: github.ref == 'refs/heads/master'
        name: Build MacOS Client Installer
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v2
              with:
                  node-version: "16.13.2"

            - name: get-npm-version
              id: package-version
              run: echo ::set-output name=DATAPM_VERSION::`jq .version package.json  | tr -d '"'`

            - name: Install Lib Dependencies
              run: npm ci
              working-directory: lib

            - name: Build Lib
              run: npm run build
              working-directory: lib

            - name: Link Lib
              run: npm link
              working-directory: lib/dist

            - name: Install client dependencies
              run: npm ci
              working-directory: client
              if: steps.cache-client-node-modules.outputs.cache-hit != 'true'

            - name: Link Lib for Client
              run: npm link datapm-lib
              working-directory: client

            - name: Run build
              run: npm run build
              working-directory: client

            - run: npm run package:macos
              working-directory: client
              env:
                  CERTIFICATE_BASE64: ${{ secrets.WINDOWS_CLIENT_CERTIFICATE_BASE64 }}
                  CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CLIENT_CERTIFICATE_PASSWORD }}

            - name: Codesign & Generate MacOS Installer
              env:
                  MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
                  MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
                  MACOS_INSTALLER_CERTIFICATE: ${{ secrets.MACOS_INSTALLER_CERTIFICATE }}
                  MACOS_INSTALLER_CERTIFICATE_PWD: ${{ secrets.MACOS_INSTALLER_CERTIFICATE_PWD }}
                  MACOS_KEYCHAIN_TEMPORARY_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_TEMPORARY_PASSWORD }}
                  APPLE_DEVELOPER_CERTIFICATE_ID: ${{secrets.APPLE_DEVELOPER_CERTIFICATE_ID}}
                  DATAPM_VERSION: ${{ steps.package-version.outputs.DATAPM_VERSION}}
                  APPLE_ID: ${{ secrets.APPLE_ID }}
                  APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
                  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
              run: ./installers/macos/sign-apps.sh
              working-directory: client

            - name: "Create MacOS Installer Artifact"
              uses: actions/upload-artifact@v2
              with:
                  name: datapm-client-macos
                  path: ./client/installers/macos/macOS-x64/target/pkg-signed/*.pkg
                  retention-days: 7

    buildAndDeploy:
        name: "Build And Deploy"
        timeout-minutes: 20
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/master'
        needs:
            - build-macos-client
            - build-win-client
        env:
            INPUT_TOKEN: "" # See https://github.com/JS-DevTools/npm-publish/issues/15
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - uses: actions/setup-node@v2-beta
              with:
                  node-version: "16.13.2"

            - name: Print npm verion
              run: npm --version

            - name: Print node verion
              run: node --version

            - name: Install Dependencies
              run: npm ci

            - name: Install Lib Dependencies
              id: install-lib-Dependencies
              run: npm ci
              working-directory: lib

            - name: Build Lib
              id: build-lib-Dependencies
              run: npm run build
              working-directory: lib

            - name: Link Lib
              run: npm link
              working-directory: lib/dist

            - uses: JS-DevTools/npm-publish@v1
              with:
                  package: ./lib/dist/package.json
                  token: ${{ secrets.NPM_TOKEN }}

            - name: Install Backend Dependencies
              id: install-backend-Dependencies
              run: npm ci
              working-directory: backend

            - name: Link Lib for Backend
              run: npm link datapm-lib
              working-directory: backend

            - name: Build Backend
              id: build-backend-Dependencies
              run: npm run build
              working-directory: backend

            - name: Install Frontend Dependencies
              id: install-frontend-dependencies
              run: npm ci
              working-directory: frontend

            - name: Link Lib for Frontend
              run: npm link datapm-lib
              working-directory: frontend

            - name: Build Frontend
              id: build-frontend-Dependencies
              run: npm run build
              working-directory: frontend

            - name: Install Docs Dependencies
              id: install-docs-dependencies
              run: npm ci
              working-directory: docs/website

            - name: Build Docs
              id: build-docs-Dependencies
              run: npm run build
              working-directory: docs/website

            - name: Download Windows Installer
              uses: actions/download-artifact@v2
              with:
                  name: datapm-client-windows
                  path: dist/client-installers

            - name: Download MacOS Installer
              uses: actions/download-artifact@v2
              with:
                  name: datapm-client-macos
                  path: dist/client-installers

            - name: Build Registry Docker Container
              run: gulp buildRegistryDockerImage

            - name: Smoke Test Registry Docker Image
              run: npm run test

            - name: Echo Docker Password to file
              run: echo $${{secrets.DOCKER_PASSWORD}} > ~/docker-password

            - name: Authorize Docker
              uses: docker/login-action@v1
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Write Credentials file
              run: echo $GOOGLE_CREDENTIALS > gcloud.key
              env:
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}

            - name: Authenticate to Google Cloud
              run: gcloud auth activate-service-account deployment@datapm-test-terraform.iam.gserviceaccount.com --key-file=gcloud.key

            - name: Authorize Docker for GCR
              run: gcloud auth configure-docker --quiet

            - name: Deploy Assets
              run: npm run deploy
              env:
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: ~/gcloud.key

            - uses: JS-DevTools/npm-publish@v1
              with:
                  package: ./client/package.json
                  token: ${{ secrets.NPM_TOKEN }}

            - name: Terraform Init to
              run: terraform init
              env:
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: gcloud.key

            - name: Terraform Plan
              run: terraform plan
              env:
                  TF_VAR_APOLLO_KEY: ${{secrets.TF_VAR_APOLLO_KEY}}
                  TF_VAR_smtp_password: ${{secrets.TF_VAR_SMTP_PASSWORD}}
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}

            - name: Add GCR Revision
              run: gcloud run deploy datapm-registry --project datapm-test-terraform --image gcr.io/datapm-test-terraform/datapm-registry --region us-central1 --platform managed
              env:
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}

            - name: Terraform Apply
              run: terraform apply -auto-approve
              env:
                  TF_VAR_APOLLO_KEY: ${{secrets.TF_VAR_APOLLO_KEY}}
                  TF_VAR_smtp_password: ${{secrets.TF_VAR_SMTP_PASSWORD}}
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}

            - name: Update GCR Traffic
              run: gcloud run services update-traffic datapm-registry --project datapm-test-terraform --region us-central1 --platform managed --to-latest
              env:
                  PROJECT_ID: data-test-terraform
                  GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}

            - name: Publish Apollo Graphql Update
              run: npx apollo service:push --graph=datapm --key=${{secrets.TF_VAR_APOLLO_KEY}} --variant=test --localSchemaFile=backend/dist/schema.gql,backend/dist/auth-schema.gql,backend/dist/user-schema.gql,backend/dist/api-key-schema.gql,backend/dist/images-schema.gql
              env:
                  INPUT_TOKEN: ${{ secrets.NPM_TOKEN }}

    github-release-clients:
        runs-on: ubuntu-latest
        name: "Client Releases on GitHub"
        if: github.ref == 'refs/heads/master'
        needs:
            - "build-macos-client"
            - "build-win-client"
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Download Windows Installer
              uses: actions/download-artifact@v2
              with:
                  name: datapm-client-windows
                  path: dist/client-installers

            - name: Download MacOS Installer
              uses: actions/download-artifact@v2
              with:
                  name: datapm-client-macos
                  path: dist/client-installers

            - name: Find DataPM Version
              id: datapm-version
              run: echo ::set-output name=DATAPM_VERSION::`jq .version package.json  | tr -d '"'`

            - name: setup git config
              run: git config user.name "$${{env.GITHUB_ACTOR}}" && git config user.email "gitHubActionDeployer@no-reply"

            - name: Tag
              run: git tag -a $DATAPM_VERSION -m "Release $DATAPM_VERSION" && git push origin $DATAPM_VERSION
              env:
                  DATAPM_VERSION: ${{ steps.datapm-version.outputs.DATAPM_VERSION}}

            - name: Release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ steps.datapm-version.outputs.DATAPM_VERSION}}
                  files: |
                      dist/client-installers/*.msix
                      dist/client-installers/*.pkg

    bumpVersion:
        name: "Bump Version"
        timeout-minutes: 5
        runs-on: "ubuntu-latest"
        needs: buildAndDeploy
        if: always() && github.ref == 'refs/heads/master'
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - uses: actions/setup-node@v2-beta
              with:
                  node-version: "16.13.2"

            - name: Install Dependencies
              run: npm ci

            - name: Set Git Author
              run: git config user.name "$${{env.GITHUB_ACTOR}}" && git config user.email "gitHubActionDeployer@no-reply"

            - name: Bump Package Files Lib Versions
              run: npm run bump-package-lib-versions

            - name: Bump Version
              run: npm run bump-version

            - name: Git Commit
              run: npm run git-commit-push
